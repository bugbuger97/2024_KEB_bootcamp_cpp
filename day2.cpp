/*
왜 반복문이 느린지 이해하기 전에 컴퓨터의 메모리의 계층적 구조에 대해서 알아보자.

1. 레지스터(Register)
    - 가장 빠르고 작은 메모리 단위, CPU에 내장되어 있는 저장 공간임.
    - 프로세서(CPU)가 즉시 사용할 수 있는 데이터를 저장함.
    - 프로세서(CPU)가 레지스터를 통해 매우 빠르게 데이터에 접근할 수 있음.
    - 레지스터는 소량의 데이터만을 저장하며, 가격이 비싸기 때문에 큰 용량을 가지고 있지 않음.

2. 캐시(Cache)
    - 레지스터 다음으로 속도가 빠른 메모리 계층으로, CPU와 메인 메모리 사이에 위치함.
    - 캐시는 주로 최근에 사용된 데이터를 저장하고, 데이터를 빠르게 CPU로 가져올 수 있도록 도움.
    - 캐시는 L1, L2, L3와 같이 여러 계층으로 나누어짐.
    - L1 캐시는 CPU에 가장 가깝고 가장 빠르며, L3 캐시는 더 큰 용량을 가지고 CPU와 떨어져 있어 L1 캐시보다는 느리다.
    - 캐시의 크기는 작지만, 데이터 접근 속도가 빠르기 때문에, 프로그램의 성능을 크게 향상시킬 수 있음.

3. 메인 메모리(Main Memory)
    - 프로그램이 실행되는 동안 데이터와 명령어를 저장하는 곳임.
    - 캐시보다는 느리지만, 용량이 크고 가격이 상대적으로 저렴함.
    - 메인 메모리는 주로 RAM(Random Access Memory)로 불림.

4. 보조 기억 장치(Auxilliary Storage)
    - 하드 디스크 드라이브, SSD(고체 상태 드라이브), 광학 디스크 등이 이에 속함.
    - 메인 메모리보다 용량이 크지만, 데이터에 접근하는 속도는 더 느림.
    - 주로 프로그램과 데이터의 장기적인 보존을 담당함.

"반복문은 왜 느린가?" 에 대해서 여러가지 이유를 설명하겠다.

1. 캐시 지역성(Cache Locality)
    - 컴퓨터의 메모리는 계층적인 구조로 이루어져 있음. 각 계층 간의 속도 차이가 크다.
    - 반복문이 데이터에 접근할 때, 데이터가 캐시에 이미 적재 되어 있다면, 접근 시간이 훨씬 빠름.
    - 그러나 반복문이 랜덤한 메모리 주소에 접근한다면, 캐시 지역성이 떨어져 성능 저하가 발생할 수 있음.

2. 메모리 계층 구조 활용 부족
    - 반복문 내에서 사용되는 데이터가 메모리의 계층적 구조를 효과적으로 활용하지 못하면 성능이 저하됨.
    - 예를 들어, 배열의 원소들이 메모리에 연속적으로 저장되어 있지 않거나, 캐시 블록 크기를 초과하는 큰 데이터 구조를 다루는 경우에 성능 문제가 발생할 수 있음.

3. 분기 예측 실패(Branch Prediction Failures)
    - 반복문 내에서 분기문이나 조건문이 있는 경우, 이를 예측하는 것이 중요함.
    - 반복문이 복잡하고 예측하기 어려운 경우, 분기 예측 실패가 발생하여 파이프 라인이 비어있게 되고, 성능이 저하될 수 있음.

4. 메모리 참조 패턴(Memory Access Patterns)
    - 반복문의 메모리 참조 패턴이 메모리 효율성을 떨어뜨릴 수 있음
    - 예를 들어, 메모리를 랜덤하게 참조하는 경우와 순차적으로 참조하는 경우 각각의 성능이 다를 수 있음.
    - 일반적으로 메모리는 순차적인 액세스에 더 효율적으로 동작함.
*/